<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="CountCurrentPosition" Id="{9470ef1e-6d57-4400-87bd-bf87707256a6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CountCurrentPosition
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF IO.Initialized THEN
	
	// COUNT ROTATION:
	IF IO.StepRotatonSwitch = 1 AND Automatic.RCurrentlyMoving THEN
		// away from the sensor:
		IF IO.MotorRotationDirection = 0 THEN
			IF (NOT IO.Switch) THEN		// in automatic mode
				IF IO.PreviousManualMode THEN	
					Automatic.RotationPositionCurrent := Automatic.RotationPositionCurrent + 1;
				ELSE	// to restore the state
					Automatic.RotationPositionCurrent := Automatic.RotationPositionCurrent + 1;
					Automatic.RotationPositionAuto := Automatic.RotationPositionAuto + 1;
				END_IF
			ELSE		// in manual mode
				Automatic.RotationPositionCurrent := Automatic.RotationPositionCurrent + 1;
			END_IF
		// towards the sensor:
		ELSE
			IF (NOT IO.Switch) THEN		// in automatic mode
				IF IO.PreviousManualMode THEN	
					Automatic.RotationPositionCurrent := Automatic.RotationPositionCurrent - 1;
				ELSE	// to restore the state
					Automatic.RotationPositionCurrent := Automatic.RotationPositionCurrent - 1;
					Automatic.RotationPositionAuto := Automatic.RotationPositionAuto - 1;
				END_IF
			ELSE		// in manual mode
				Automatic.RotationPositionCurrent := Automatic.RotationPositionCurrent - 1;
			END_IF
		END_IF
	END_IF
	
	// COUNT Extension:
	IF IO.StepExtensionSwitch = 1 AND Automatic.ECurrentlyMoving THEN
		// away from the sensor:
		IF IO.MotorExtensionDirection = 0 THEN
			IF (NOT IO.Switch) THEN		// in automatic mode
				IF IO.PreviousManualMode THEN
					Automatic.ExtensionPositionCurrent := Automatic.ExtensionPositionCurrent + 1;
				ELSE	// to restore the state
					Automatic.ExtensionPositionCurrent := Automatic.ExtensionPositionCurrent + 1;
					Automatic.ExtensionPositionAuto := Automatic.ExtensionPositionAuto + 1;
				END_IF
			ELSE		// in manual mode
				Automatic.ExtensionPositionCurrent := Automatic.ExtensionPositionCurrent + 1;
			END_IF
		// towards the sensor:
		ELSE
			IF (NOT IO.Switch) THEN		// in automatic mode
				IF IO.PreviousManualMode THEN	
					Automatic.ExtensionPositionCurrent := Automatic.ExtensionPositionCurrent - 1;
				ELSE	// to restore the state
					Automatic.ExtensionPositionCurrent := Automatic.ExtensionPositionCurrent - 1;
					Automatic.ExtensionPositionAuto := Automatic.ExtensionPositionAuto - 1;
				END_IF
			ELSE		// in manual mode
				Automatic.ExtensionPositionCurrent := Automatic.ExtensionPositionCurrent - 1;
			END_IF
		END_IF
	END_IF
	
	// COUNT Lifting:
	IF IO.StepLiftingSwitch = 1 AND Automatic.LCurrentlyMoving THEN
		// away from the sensor:
		IF IO.MotorLiftingDirection = 0 THEN
			IF (NOT IO.Switch) THEN		// in automatic mode
				IF IO.PreviousManualMode THEN
					Automatic.LiftingPositionCurrent := Automatic.LiftingPositionCurrent + 1;
				ELSE	// to restore the state
					Automatic.LiftingPositionCurrent := Automatic.LiftingPositionCurrent + 1;
					Automatic.LiftingPositionAuto := Automatic.LiftingPositionAuto + 1;
				END_IF
			ELSE		// in manual mode
				Automatic.LiftingPositionCurrent := Automatic.LiftingPositionCurrent + 1;
			END_IF
		// towards the sensor:
		ELSE
			IF (NOT IO.Switch) THEN		// in automatic mode
				IF IO.PreviousManualMode THEN
					Automatic.LiftingPositionCurrent := Automatic.LiftingPositionCurrent - 1;
				ELSE	// to restore the state
					Automatic.LiftingPositionAuto := Automatic.LiftingPositionAuto - 1;
					Automatic.LiftingPositionCurrent := Automatic.LiftingPositionCurrent - 1;
				END_IF
			ELSE		// in manual mode
				Automatic.LiftingPositionCurrent := Automatic.LiftingPositionCurrent - 1;
			END_IF
		END_IF
	END_IF
	
	// COUNT Grip:
	IF IO.StepGripSwitch = 1 AND Automatic.GCurrentlyMoving THEN
		IF IO.MotorGripDirection = 0 THEN
			IF (NOT IO.Switch) THEN		// in automatic mode
				IF IO.PreviousManualMode THEN
					Automatic.GripPositionCurrent := Automatic.GripPositionCurrent + 1;
				ELSE
					Automatic.GripPositionAuto := Automatic.GripPositionAuto + 1;
					Automatic.GripPositionCurrent := Automatic.GripPositionCurrent + 1;
				END_IF
			ELSE		// in manual mode
				Automatic.GripPositionCurrent := Automatic.GripPositionCurrent + 1;
			END_IF
		ELSE
			IF (NOT IO.Switch) THEN		// in automatic mode
				IF IO.PreviousManualMode THEN
					Automatic.GripPositionCurrent := Automatic.GripPositionCurrent - 1;
				ELSE
					Automatic.GripPositionAuto := Automatic.GripPositionAuto - 1;
					Automatic.GripPositionCurrent := Automatic.GripPositionCurrent - 1;
				END_IF
			ELSE		// in manual mode
				Automatic.GripPositionCurrent := Automatic.GripPositionCurrent - 1;
			END_IF
		END_IF
	END_IF
	
END_IF]]></ST>
    </Implementation>
    <LineIds Name="CountCurrentPosition">
      <LineId Id="218" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="222" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="226" Count="1" />
      <LineId Id="225" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="133" Count="1" />
      <LineId Id="131" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="228" Count="8" />
      <LineId Id="135" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="30" Count="2" />
      <LineId Id="278" Count="25" />
      <LineId Id="277" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="268" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="159" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="202" Count="2" />
      <LineId Id="182" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="162" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="74" Count="3" />
      <LineId Id="98" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="205" Count="2" />
      <LineId Id="184" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="114" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="208" Count="2" />
      <LineId Id="186" Count="0" />
      <LineId Id="123" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>