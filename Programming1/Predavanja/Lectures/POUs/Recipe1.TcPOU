<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Recipe1" Id="{f8183289-6e8d-4e31-9979-1875ef80169a}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Recipe1
VAR
	State: INT := 0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF State = 24 AND IO.ButtonGreen THEN	// reinitialize and run the recipe again on green button press
	IO.Initialized := 0;
	State := 0;
END_IF

IF IO.Initialized AND NOT IO.Switch THEN
	
	// delay...
	// vrni se v stanje ob preklopu...
	// daj v funkcije in kliči, namesto PRG...
	// Recipe2...
	
	// WOOD:
	IF State = 0 THEN
		IF Automatic.LiftingPositionAuto < 50 THEN
			IO.MotorLiftingDirection := 0;
			IO.MotorLifting := 1;
			Automatic.LiftingPositionAuto := Automatic.LiftingPositionAuto + 1;
			Automatic.LiftingPositionCurrent := Automatic.LiftingPositionCurrent + 1;
		ELSE
			State := 1;
			IO.MotorLifting := 0;
		END_IF
	ELSIF State = 1 THEN
		IF Automatic.ExtensionPositionAuto < 388 THEN
			IO.MotorExtensionDirection := 0;
			IO.MotorExtension := 1;
			Automatic.ExtensionPositionAuto := Automatic.ExtensionPositionAuto + 1;
			Automatic.ExtensionPositionCurrent := Automatic.ExtensionPositionCurrent + 1;
		ELSE
			State := 2;
			IO.MotorExtension := 0;
		END_IF
	ELSIF State = 2 THEN
		IF Automatic.GripPositionAuto < 160 THEN
			IO.MotorGripDirection := 0;
			IO.MotorGrip := 1;
			Automatic.GripPositionAuto := Automatic.GripPositionAuto + 1;
			Automatic.GripPositionCurrent := Automatic.GripPositionCurrent + 1;
		ELSE
			State := 3;
			IO.MotorGrip := 0;
		END_IF
	ELSIF State = 3 THEN
		IF NOT IO.EndLiftingSensor THEN
			IO.MotorLiftingDirection := 0;
			IO.MotorLifting := 1;
			Automatic.LiftingPositionAuto := Automatic.LiftingPositionAuto - 1;
			Automatic.LiftingPositionCurrent := Automatic.LiftingPositionCurrent - 1;
		ELSE
			State := 4;
			IO.MotorLifting := 0;
		END_IF
	ELSIF State = 4 THEN
		IF Automatic.RotationPositionAuto < 300 THEN
			IO.MotorRotationDirection := 0;
			IO.MotorRotation := 1;
			Automatic.RotationPositionAuto := Automatic.RotationPositionAuto + 1;
			Automatic.RotationPositionCurrent := Automatic.RotationPositionCurrent + 1;
		ELSE
			State := 5;
			IO.MotorRotation := 0;
		END_IF
	ELSIF State = 5 THEN
		IF NOT IO.EndExtensionSensor THEN	// it drops wood in the nearest bin
			IO.MotorExtensionDirection := 1;
			IO.MotorExtension := 1;
			Automatic.ExtensionPositionAuto := Automatic.ExtensionPositionAuto - 1;
			Automatic.ExtensionPositionCurrent := Automatic.ExtensionPositionCurrent - 1;
		ELSE
			State := 6;
			IO.MotorExtension := 0;
		END_IF
	ELSIF State = 6 THEN
		IF NOT IO.EndGripSensor THEN
			IO.MotorGripDirection := 1;
			IO.MotorGrip := 1;
			Automatic.GripPositionAuto := Automatic.GripPositionAuto - 1;
			Automatic.GripPositionCurrent := Automatic.GripPositionCurrent - 1;
		ELSE
			State := 7;
			IO.MotorGrip := 0;
		END_IF
	ELSIF State = 7 THEN
		IF NOT IO.EndRotationSensor THEN
			IO.MotorRotationDirection := 1;
			IO.MotorRotation := 1;
			Automatic.RotationPositionAuto := Automatic.RotationPositionAuto - 1;
			Automatic.RotationPositionCurrent := Automatic.RotationPositionCurrent - 1;
		ELSE
			State := 8;
			IO.MotorRotation := 0;
		END_IF
	END_IF
	
	// PLASTICS:
	IF State = 8 THEN
		IF Automatic.LiftingPositionAuto < 250 THEN
			IO.MotorLiftingDirection := 0;
			IO.MotorLifting := 1;
			Automatic.LiftingPositionAuto := Automatic.LiftingPositionAuto + 1;
			Automatic.LiftingPositionCurrent := Automatic.LiftingPositionCurrent + 1;
		ELSE
			State := 9;
			IO.MotorLifting := 0;
		END_IF
	ELSIF State = 9 THEN
		IF Automatic.ExtensionPositionAuto < 388 THEN
			IO.MotorExtensionDirection := 0;
			IO.MotorExtension := 1;
			Automatic.ExtensionPositionAuto := Automatic.ExtensionPositionAuto + 1;
			Automatic.ExtensionPositionCurrent := Automatic.ExtensionPositionCurrent + 1;
		ELSE
			State := 10;
			IO.MotorExtension := 0;
		END_IF
	ELSIF State = 10 THEN
		IF Automatic.GripPositionAuto < 160 THEN
			IO.MotorGripDirection := 0;
			IO.MotorGrip := 1;
			Automatic.GripPositionAuto := Automatic.GripPositionAuto + 1;
			Automatic.GripPositionCurrent := Automatic.GripPositionCurrent + 1;
		ELSE
			State := 11;
			IO.MotorGrip := 0;
		END_IF
	ELSIF State = 11 THEN
		IF NOT IO.EndLiftingSensor THEN
			IO.MotorLiftingDirection := 1;
			IO.MotorLifting := 1;
			Automatic.LiftingPositionAuto := Automatic.LiftingPositionAuto - 1;
			Automatic.LiftingPositionCurrent := Automatic.LiftingPositionCurrent - 1;
		ELSE
			State := 12;
			IO.MotorLifting := 0;
		END_IF
	ELSIF State = 12 THEN
		IF Automatic.RotationPositionAuto < 300 THEN
			IO.MotorRotationDirection := 0;
			IO.MotorRotation := 1;
			Automatic.RotationPositionAuto := Automatic.RotationPositionAuto + 1;
			Automatic.RotationPositionCurrent := Automatic.RotationPositionCurrent + 1;
		ELSE
			State := 13;
			IO.MotorRotation := 0;
		END_IF
	ELSIF State = 13 THEN
		IF Automatic.ExtensionPositionAuto > 300 THEN	// it drops plastics into second nearest bin
			IO.MotorExtensionDirection := 1;
			IO.MotorExtension := 1;
			Automatic.ExtensionPositionAuto := Automatic.ExtensionPositionAuto - 1;
			Automatic.ExtensionPositionCurrent := Automatic.ExtensionPositionCurrent - 1;
		ELSE
			State := 14;
			IO.MotorExtensionDirection := 0;
			IO.MotorExtension := 0;
		END_IF
	ELSIF State = 14 THEN
		IF NOT IO.EndGripSensor THEN
			IO.MotorGripDirection := 1;
			IO.MotorGrip := 1;
			Automatic.GripPositionAuto := Automatic.GripPositionAuto - 1;
			Automatic.GripPositionCurrent := Automatic.GripPositionCurrent - 1;
		ELSE
			State := 15;
			IO.MotorGrip := 0;
		END_IF
	ELSIF State = 15 THEN
		IF NOT IO.EndRotationSensor THEN
			IO.MotorRotationDirection := 1;
			IO.MotorRotation := 1;
			Automatic.RotationPositionAuto := Automatic.RotationPositionAuto - 1;
			Automatic.RotationPositionCurrent := Automatic.RotationPositionCurrent - 1;
		ELSE
			State := 16;
			IO.MotorRotation := 0;
		END_IF
	END_IF
	
	// METAL:
	IF State = 16 THEN
		IF Automatic.LiftingPositionAuto < 400 THEN
			IO.MotorLiftingDirection := 0;
			IO.MotorLifting := 1;
			Automatic.LiftingPositionAuto := Automatic.LiftingPositionAuto + 1;
			Automatic.LiftingPositionCurrent := Automatic.LiftingPositionCurrent + 1;
		ELSE
			State := 17;
			IO.MotorLifting := 0;
		END_IF
	ELSIF State = 17 THEN
		IF Automatic.ExtensionPositionAuto < 388 THEN
			IO.MotorExtensionDirection := 0;
			IO.MotorExtension := 1;
			Automatic.ExtensionPositionAuto := Automatic.ExtensionPositionAuto + 1;
			Automatic.ExtensionPositionCurrent := Automatic.ExtensionPositionCurrent + 1;
		ELSE
			State := 18;
			IO.MotorExtension := 0;
		END_IF
	ELSIF State = 18 THEN
		IF Automatic.GripPositionAuto < 160 THEN
			IO.MotorGripDirection := 0;
			IO.MotorGrip := 1;
			Automatic.GripPositionAuto := Automatic.GripPositionAuto + 1;
			Automatic.GripPositionCurrent := Automatic.GripPositionCurrent + 1;
		ELSE
			State := 19;
			IO.MotorGrip := 0;
		END_IF
	ELSIF State = 19 THEN
		IF NOT IO.EndLiftingSensor THEN
			IO.MotorLiftingDirection := 1;
			IO.MotorLifting := 1;
			Automatic.LiftingPositionAuto := Automatic.LiftingPositionAuto - 1;
			Automatic.LiftingPositionCurrent := Automatic.LiftingPositionCurrent - 1;
		ELSE
			State := 20;
			IO.MotorLifting := 0;
		END_IF
	ELSIF State = 20 THEN
		IF Automatic.RotationPositionAuto < 300 THEN
			IO.MotorRotationDirection := 0;
			IO.MotorRotation := 1;
			Automatic.RotationPositionAuto := Automatic.RotationPositionAuto + 1;
			Automatic.RotationPositionCurrent := Automatic.RotationPositionCurrent + 1;
		ELSE
			State := 21;
			IO.MotorRotation := 0;
		END_IF
	ELSIF State = 21 THEN
		IF Automatic.ExtensionPositionAuto > 500 THEN	// it drops metal into farthest bin
			IO.MotorExtensionDirection := 1;
			IO.MotorExtension := 1;
			Automatic.ExtensionPositionAuto := Automatic.ExtensionPositionAuto - 1;
			Automatic.ExtensionPositionCurrent := Automatic.ExtensionPositionCurrent - 1;
		ELSE
			State := 22;
			IO.MotorExtension := 0;
		END_IF
	ELSIF State = 22 THEN
		IF NOT IO.EndGripSensor THEN
			IO.MotorGripDirection := 1;
			IO.MotorGrip := 1;
			Automatic.GripPositionAuto := Automatic.GripPositionAuto - 1;
			Automatic.GripPositionCurrent := Automatic.GripPositionCurrent - 1;
		ELSE
			State := 23;
			IO.MotorGrip := 0;
		END_IF
	ELSIF State = 23 THEN
		IF NOT IO.EndRotationSensor THEN
			IO.MotorRotationDirection := 1;
			IO.MotorRotation := 1;
			Automatic.RotationPositionAuto := Automatic.RotationPositionAuto - 1;
			Automatic.RotationPositionCurrent := Automatic.RotationPositionCurrent - 1;
		ELSE
			State := 24;
			IO.MotorRotation := 0;
		END_IF
	END_IF
END_IF]]></ST>
    </Implementation>
    <LineIds Name="Recipe1">
      <LineId Id="391" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="393" Count="1" />
      <LineId Id="392" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="362" Count="1" />
      <LineId Id="395" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="380" Count="6" />
      <LineId Id="388" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="132" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="134" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="328" Count="7" />
      <LineId Id="337" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="51" Count="3" />
      <LineId Id="131" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="59" Count="3" />
      <LineId Id="137" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="123" Count="3" />
      <LineId Id="139" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="130" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="145" Count="7" />
      <LineId Id="154" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="75" Count="1" />
      <LineId Id="231" Count="9" />
      <LineId Id="166" Count="17" />
      <LineId Id="185" Count="1" />
      <LineId Id="339" Count="7" />
      <LineId Id="348" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="187" Count="7" />
      <LineId Id="196" Count="20" />
      <LineId Id="218" Count="9" />
      <LineId Id="229" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="242" Count="27" />
      <LineId Id="271" Count="1" />
      <LineId Id="350" Count="7" />
      <LineId Id="359" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="273" Count="7" />
      <LineId Id="282" Count="9" />
      <LineId Id="293" Count="9" />
      <LineId Id="304" Count="9" />
      <LineId Id="315" Count="1" />
      <LineId Id="241" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>